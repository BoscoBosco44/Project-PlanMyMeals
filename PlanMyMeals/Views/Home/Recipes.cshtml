@model RecipeViewModel


<div class="body-Recipe">
    <h1 class="AddRecipeText">Add Recipe</h1>
    <div class="AddRecipeLine"></div>

    <form asp-action="" asp-controller="Home" method="post" class="flex">

        <div class="left-main3">

            <div class="NameAndInstructionsBox">
                <div class="InfoBoxSpacing">
                    <label class="paddingR-1" asp-for="thisMeal.Name">Name</label>
                    <input asp-for="thisMeal.Name">
                    <span asp-validaton-for="thisMeal.Name"></span>
                </div>
                <div class="InfoBoxSpacing">
                    <label class="paddingR-1" asp-for="thisMeal.Instructions">Instructions</label>
                    <input class="InstructionsInputBox" asp-for="thisMeal.Instructions">
                    <span asp-validaton-for="thisMeal.Instructions"></span>
                </div>

            </div>

        </div>

        <div class="center-main3">
            <h3>Recipe's Ingredients</h3>

            <ul>
                @foreach(MealIngredient mIng in Model.mealsIngredients) {
                <li>@mIng.Id</li>
                }


            </ul>
        </div>

        <div class="right-main3">
            <h3>Ingredient search:</h3>
            <div>
                <input id="ingredientSearch" oninput="ingSearch()" placeholder="Search..." />
            </div>

            <ul id="ingredientListDisplay">
                @foreach(Ingredient ing in Model.allIngredients) {
                <li class="ingredient-item-QSA" data-name="@ing.Name">
                    <button type="button" class="btn-primary" onclick="addIngredientToRecipe()" name="@ing.Name">@ing.Name</button>
                </li>
                }
            </ul>


            @*The Razor loop generates a list of ingredients in <ul> as <li> elements with a data-name attribute storing the ingredient's name. This allows JavaScript to access the name for filtering.*@
        </div>

    </form>

</div>


@* // --------- Popup ---------*@

<div class="IngAmountPopup" id="IngAmountPopup">
    <h3>Enter amout in grams:</h3>
    <form asp-for="" asp-controller="" method="post" class="">

        <div id="amountInputIdDiv" >
            <input id="amountInputId" />

        </div>

        <input placeholder="Amount in grams" />

        <button type="submit" class="btn-primary">Add Ingredient to recipe</button>
    </form>
</div>


<script>
    function ingSearch() {
        var input = document.getElementById("ingredientSearch").value.toLowerCase();
        var ingredients = document.querySelectorAll('.ingredient-item-QSA'); //gets all elements with matching CSS tag

        ingredients.forEach(function (item) {
            var ingName = item.getAttribute('data-name').toLowerCase();
            if (ingName.startsWith(input)) {
                item.style.display = 'list-item'; //show item
            }
            else {
                item.style.display = 'none'; //hides item
                console.log("hiding item " + ingName);
            }
        });
    }


    

    function addIngredientToRecipe() {
        //1. show popup
        console.log("showing popup");
        showPopup();

        //2. get ing name and put it in popup
        window.onclick = e => {
            console.log(e.target.name);
            var str = e.target.name;
            console.log(`<input value="${str}" />`);
            document.getElementById('amountInputIdDiv').innerHTML = `<input value=${str} />`;
        }

        //3. after user inputs amout, create MealIngredient by sending info to home controller, running curd routes and re rendering this view
        //4. display MealIngredient





    }

    function showPopup() {
        var popupElement = document.getElementById('IngAmountPopup');
        popupElement.style.display = 'inline';
    }

    function hidePopup() {
        var popupElement = document.getElementById('IngAmountPopup');
        popupElement.style.display = 'none';
    }


</script>